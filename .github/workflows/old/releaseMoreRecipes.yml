# This workflow will build a KivySwiftLink release

name: release builder more recipes


on:

  workflow_dispatch:
    inputs:
      tag:
        description: 'input new release tag'
        required: true
        type: string
      lastest:
        description: 'lastest release?'
        required: false
        type: boolean
        default: false

jobs:
  toolchainBuild:
    runs-on: macOS-13
    #runs-on: self-hosted
    permissions:
        contents: write
  
    steps:
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.0'
        
      - uses: actions/checkout@v4
      
      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11' # install the python version needed
      
      - name: brew installs
        run: |
          brew tap PythonSwiftLink/tools
          brew install swiftpackagegen
      
      # - name: chmod tools
      #   run: |
      #     chmod 755 tools/SwiftPackageGen
      #     chmod 755 tools/PSProject
      
      - name: install kivy-ios
        uses: kivyswiftlink/actions/install_kivy_ios@master
      #### build phase ####
      
      - name: build hostpython3
        run: toolchain build hostpython3
      - name: build python3
        run: toolchain build python3
      #- name: build numpy
      #  run: toolchain build numpy
      - name: create NumpyCore
        uses: kivyswiftlink/actions/build_numpy@master
      
      - name: build kivy
        run: toolchain build kivy
      - name: build pillow
        run: toolchain build pillow
      

      # taking out necessary libraries and zipping them into "output" folder
      - name: repack python3.11 
        run: |
          #mkdir output
          cp -rf dist/xcframework output/
          
          PY_HEADERS=dist/root/python3/include/python3.11
          PY_XC=output/xcframework/libpython3.11.xcframework
          cp -rf $PY_HEADERS $PY_XC/ios-arm64/
          cp -rf $PY_HEADERS $PY_XC/ios-x86_64-simulator/
          cp -f plists/python.plist $PY_XC/Info.plist
      
      - name: repack & zip python site-packages
        run: |
          PY_LIB=dist/root/python3/lib
          mkdir -p output/python
          mkdir -p output/kivy

          mv $PY_LIB/python3.11/site-packages site-packages
          zip -r site-packages.zip site-packages
          mv -f site-packages.zip output/kivy/
          
          mv $PY_LIB output/python/python_lib
          #mv $PY_LIB python_lib
          #zip -r python_lib.zip python_lib
          #mv -f python_lib.zip output/python/
          

      - name: repack & zip dist_libs
        id: repack_dist
        run: |
          mv dist/lib output/dist_lib
          cd output
          IOS_LIBS=dist_lib/iphoneos
          SIM_LIBS=dist_lib/iphonesimulator
          
          echo $IOS_LIBS
          echo $SIM_LIBS

          
      - name: python_dist.zip
        working-directory: output/python
        run: |
          zip -r python_dist.zip dist_lib
          rm -rf dist_lib

      - name: kivy_dist.zip
        working-directory: output/kivy
        run: |
          zip -r kivy_dist.zip dist_lib
          rm -rf dist_lib
      

      - name: move and zip xcframeworks
        working-directory: ./output/xcframework
        run: |
          mv -f libpython3.11.xcframework libpython311.xcframework
          for FILE in *; 
              do 
                  #filename="$FILE"
                  #echo $filename
                  zip -r "${FILE%.*}".zip $FILE
                  rm -rf $FILE
              done

      - name: pack python xcframeworks
        working-directory: ./output
        run: |
          mkdir python/xcframework

          mv -f xcframework/libcrypto.zip python/xcframework/
          mv -f xcframework/libffi.zip python/xcframework/
          mv -f xcframework/libssl.zip python/xcframework/
          mv -f xcframework/libpython311.zip python/

      - name: pack xcframeworks as kivy
        working-directory: ./output
        run: |
          mv -f xcframework kivy/
      
      - name: update Python package.swift
        run: |
          SwiftPackageGen generate \
            ./package_templates/KivyPythonCore.yml \
            ${{ github.event.inputs.tag }} \
            --output output/python/Package.swift
      
      - name: update Kivy package.swift
        run: |
          SwiftPackageGen generate \
            ./package_templates/KivyCore.yml \
            ${{ github.event.inputs.tag }} \
            --output output/kivy/Package.swift

      
      # uploading "output" folder for the next task to use. (ubuntu machine)
      - uses: actions/upload-artifact@v3
        with:
          name: release-output
          path: ./output

  ###############################################################################
  ###############################################################################
  ###############################################################################
  #moving next part to an ubuntu machine
  create_package:
    name: Release Packages
    runs-on: ubuntu-latest
    needs: [toolchainBuild]


    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/download-artifact@v3
        with:
          name: release-output

      - name: create PythonCore
        run: |
          mkdir -p PythonCore/Sources
          cp -rf package_templates/PythonLibrary PythonCore/Sources/
          cp -f python/Package.swift PythonCore/
          cp -rf package_templates/PythonCore/Sources/PythonCore PythonCore/Sources/

          mv -f python/python_lib PythonCore/Sources/PythonLibrary/lib


      # commit new package to kivypythoncore/master
      - name: commit Kivy PythonCore to master
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.Homebrew }}
        with:
          source-directory: 'PythonCore'
          destination-github-username: 'kivyswiftlink'
          destination-repository-name: 'PythonCore'
          user-email: kivyswiftlink@gmail.com
          target-branch: master

      - name: releasePythonCore
        uses: ncipollo/release-action@v1
        with:
          artifacts: "python/python_dist.zip, python/xcframework/*.zip"
          tag: ${{ github.event.inputs.tag }}
          repo: PythonCore
          token: ${{ secrets.Homebrew }}
          allowUpdates: true
          makeLatest: ${{ github.event.inputs.lastest }}

      - name: create KivyCore
        run: |
          cp -rf package_templates/KivyCore KivyCore
          cp -f kivy/Package.swift KivyCore/
          

      - name: Download a kivy-ios master as asset for release
        run: |
          git clone https://github.com/kivy/kivy-ios.git
          zip -r kivy-ios.zip kivy-ios
          mv -f kivy-ios.zip kivy/

      # commit new package to kivyswiftlink/master
      - name: commit KivyCore to master
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.Homebrew }}
        with:
          source-directory: 'KivyCore'
          destination-github-username: 'kivyswiftlink'
          destination-repository-name: 'KivyCore'
          user-email: kivyswiftlink@gmail.com
          target-branch: master
      
      # create a new release from master and python_lib.zip / dist_lib.zip to the release
      - name: release KivyCore
        uses: ncipollo/release-action@v1
        with:
          artifacts: "kivy/kivy_dist.zip, kivy/site-packages.zip, kivy/kivy-ios.zip, kivy/xcframework/*.zip"
          tag: ${{ github.event.inputs.tag }}
          repo: KivyCore
          token: ${{ secrets.Homebrew }}
          allowUpdates: true
          makeLatest: ${{ github.event.inputs.lastest }}
      
      - name: create KivyNumpy
        run: |
          mkdir -p KivyNumpy/Sources
          touch KivyNumpy/Sources/KivyNumpy.swift
          cp -f numpy/Package.swift KivyNumpy/

      # commit new package to kivyswiftlink/master
      - name: commit KivyNumpy to master
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.Homebrew }}
        with:
          source-directory: 'KivyNumpy'
          destination-github-username: 'kivyswiftlink'
          destination-repository-name: 'KivyNumpy'
          user-email: kivyswiftlink@gmail.com
          target-branch: master

      # create a new release from master and python_lib.zip / dist_lib.zip to the release
      - name: release KivyNumpy
        uses: ncipollo/release-action@v1
        with:
          artifacts: "numpy/numpy_dist.zip, numpy/numpy-site.zip, numpy/xcframework/*.zip"
          tag: ${{ github.event.inputs.tag }}
          repo: KivyNumpy
          token: ${{ secrets.Homebrew }}
          allowUpdates: true
          makeLatest: ${{ github.event.inputs.lastest }}
 
