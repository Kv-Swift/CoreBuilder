# This workflow will build a KivySwiftLink release

name: release builder v2


on:

  workflow_dispatch:
    inputs:
      tag:
        description: 'input new release tag'
        required: true
        type: string




jobs:
  toolchainBuild:
    #runs-on: macOS-13
    runs-on: self-hosted
    permissions:
        contents: write
    # outputs:
      # python xcframeworks
      # libcrypto_sha: ${{ steps.xcframeworks.outputs.libcrypto }}
      # libffi_sha: ${{ steps.xcframeworks.outputs.libffi }}
      # libpython_sha: ${{ steps.xcframeworks.outputs.libpython310 }}
      # libssl_sha: ${{ steps.xcframeworks.outputs.libssl }}
      # # numpy xcframeworks
      # libnpymath_sha: ${{ steps.xcframeworks.outputs.libnpymath }}
      # libnpyrandom_sha: ${{ steps.xcframeworks.outputs.libnpyrandom }}
      # libnumpy_sha: ${{ steps.xcframeworks.outputs.libnumpy }}
      # # numpy xcframeworks
      # libfreetype_sha: ${{ steps.xcframeworks.outputs.libfreetype }}
      # libios_sha: ${{ steps.xcframeworks.outputs.libios }}
      # libjpeg_sha: ${{ steps.xcframeworks.outputs.libjpeg }}
      # libkivy_sha: ${{ steps.xcframeworks.outputs.libkivy }}
      # libpillow_sha: ${{ steps.xcframeworks.outputs.libpillow }}
      # libpng16_sha: ${{ steps.xcframeworks.outputs.libpng16 }}
      # libpyobjus_sha: ${{ steps.xcframeworks.outputs.libpyobjus }}
      # libSDL2_image_sha: ${{ steps.xcframeworks.outputs.libSDL2_image }}
      # libSDL2_mixer_sha: ${{ steps.xcframeworks.outputs.libSDL2_mixer }}
      # libSDL2_ttf_sha: ${{ steps.xcframeworks.outputs.libSDL2_ttf }}
      # libSDL2_sha: ${{ steps.xcframeworks.outputs.libSDL2 }}

      #version: ${{ steps.repack_dist.outputs.var }}
    steps:
      # - uses: maxim-lobanov/setup-xcode@v1
      #   with:
      #     xcode-version: '15.0'
        
      - uses: actions/checkout@v4
      
      # - name: setup python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: '3.10' # install the python version needed
      - name: chmod tools
        run: |
          chmod 755 tools/SwiftPackageGen
          chmod 755 tools/PSProject
      
      - name: install kivy-ios
        run: |
          #python3 -m pip install --upgrade pip
          #pip3 install https://github.com/kivy/kivy-ios/archive/master.zip
        
      - name: build hostpython3
        run: toolchain build hostpython3
      - name: build python3
        run: toolchain build python3
      - name: build numpy
        run: toolchain build numpy

      - name: move numpy build
        run: |
          mkdir -p output/numpy/headers
          BUILD_HEADERS=build/numpy/iphoneos-arm64/numpy-1.24.4/build/src.macosx-13.6-x86_64-3.10/numpy/core/include/numpy/
          cp -f $BUILD_HEADERS/__multiarray_api.h output/numpy/headers/
          cp -f $BUILD_HEADERS/__ufunc_api.h output/numpy/headers/
          cp -f $BUILD_HEADERS/_numpyconfig.h output/numpy/headers/
          cp -f $BUILD_HEADERS/_umath_doc_generated.h output/numpy/headers/
          DIST_HEADERS=dist/include/common/numpy/numpy
          mv -f $DIST_HEADERS/* output/numpy/headers/

          PY_SITE=dist/root/python3/lib/python3.10/site-packages
          mv -f $PY_SITE/numpy output/numpy/numpy-site
          rm -rf $PY_SITE/*
          cd output/numpy
          zip -r numpy-site.zip numpy-site
          rm -rf numpy-site

      - name: build kivy
        run: toolchain build kivy
      - name: build pillow
        run: toolchain build pillow
      

      # pulling out necessary libraries and zipping them into "output" folder
      - name: repack python3.10 / numpy xcframework
        #run: ./restructure.sh
        run: |
          #mkdir output
          cp -rf dist/xcframework output/
          
          PY_HEADERS=dist/root/python3/include/python3.10
          PY_XC=output/xcframework/libpython3.10.xcframework
          cp -rf $PY_HEADERS $PY_XC/ios-arm64/
          cp -rf $PY_HEADERS $PY_XC/ios-x86_64-simulator/
          cp -f plists/python.plist $PY_XC/Info.plist

          NUMPY_HEADERS=dist/include/common/numpy/numpy
          NUMPY_XC=output/xcframework/libnumpy.xcframework
          cp -rf $NUMPY_HEADERS $NUMPY_XC/ios-arm64/
          cp -rf $NUMPY_HEADERS $NUMPY_XC/ios-x86_64-simulator/
          cp -f plists/numpy.plist $NUMPY_XC/Info.plist

      
      - name: repack & zip python site-packages
        #mv dist/root/python3/lib python_lib
        #zip -r python_lib.zip python_lib
        run: |
          PY_LIB=dist/root/python3/lib
          mkdir output/python
          mkdir output/kivy

          mv $PY_LIB/python3.10/site-packages site-packages
          zip -r site-packages.zip site-packages
          mv -f site-packages.zip output/kivy/
          
          mv $PY_LIB python_lib
          zip -r python_lib.zip python_lib
          mv -f python_lib.zip output/python/

      - name: repack & zip dist_libs
        id: repack_dist
        run: |
          mv dist/lib output/dist_lib
          cd output
          IOS_LIBS=dist_lib/iphoneos
          SIM_LIBS=dist_lib/iphonesimulator
          
          echo $IOS_LIBS
          echo $SIM_LIBS

          mkdir -p numpy/$IOS_LIBS
          mv -f $IOS_LIBS/libnpymath.a numpy/$IOS_LIBS/
          mv -f $IOS_LIBS/libnpyrandom.a numpy/$IOS_LIBS/
          mv -f $IOS_LIBS/libnumpy.a numpy/$IOS_LIBS/
          echo transfered numpy/$IOS_LIBS


          mkdir -p numpy/$SIM_LIBS
          mv -f $SIM_LIBS/libnpymath.a numpy/$SIM_LIBS/
          mv -f $SIM_LIBS/libnpyrandom.a numpy/$SIM_LIBS/
          mv -f $SIM_LIBS/libnumpy.a numpy/$SIM_LIBS/
          echo transfered numpy/$SIM_LIBS

          mkdir -p python/$IOS_LIBS
          mv -f $IOS_LIBS/libcrypto.a python/$IOS_LIBS/
          mv -f $IOS_LIBS/libssl.a python/$IOS_LIBS/
          mv -f $IOS_LIBS/libffi.a python/$IOS_LIBS/
          mv -f $IOS_LIBS/libpython3.10.a python/$IOS_LIBS/
          echo transfered python/$IOS_LIBS

          mkdir -p python/$SIM_LIBS
          mv -f $SIM_LIBS/libcrypto.a python/$SIM_LIBS/
          mv -f $SIM_LIBS/libssl.a python/$SIM_LIBS/
          mv -f $SIM_LIBS/libffi.a python/$SIM_LIBS/
          mv -f $SIM_LIBS/libpython3.10.a python/$SIM_LIBS/
          echo transfered python/$SIM_LIBS

          mkdir -p kivy/$IOS_LIBS
          mv -f $IOS_LIBS kivy/$IOS_LIBS
          echo transfered kivy/$IOS_LIBS

          mkdir -p kivy/$SIM_LIBS
          mv -f $SIM_LIBS kivy/$SIM_LIBS
          echo transfered python/$SIM_LIBS
          
          cd kivy
          zip -r kivy_dist.zip dist_lib
          rm -rf dist_lib
          cd ..
          cd python
          zip -r python_dist.zip dist_lib
          rm -rf dist_lib
          cd ..
          cd numpy
          zip -r numpy_dist.zip dist_lib
          rm -rf dist_lib
          

      - name: move and zip xcframeworks
        run: |
          cd output/xcframework
          mv -f libpython3.10.xcframework libpython310.xcframework
          for FILE in *; 
              do 
                  #filename="$FILE"
                  #echo $filename
                  zip -r "${FILE%.*}".zip $FILE
                  rm -rf $FILE
              done
            

      # - name: xcframework get sha values
      #   id: xcframeworks
      #   run: |
      #     cd output/xcframework
      #     for FILE in *; 
      #     do 
      #         FILENAME="${FILE%.*}"
      #         SHA="$(shasum -a 256 $FILE | awk '{printf $1}')"
      #         out="$FILENAME=$SHA"
      #         echo $out
      #         echo $out >> $GITHUB_OUTPUT
      #     done
      
      - name: pack python xcframeworks
        run: |
          cd output
          mkdir python/xcframework

          mv -f xcframework/libcrypto.zip python/xcframework/
          mv -f xcframework/libffi.zip python/xcframework/
          mv -f xcframework/libssl.zip python/xcframework/
          mv -f xcframework/libpython310.zip python/xcframework/
          echo "ls output:"
          ls
          echo "ls output/python:"
          ls python

      - name: update Kivy package.swift
        run: |
          tools/SwiftPackageGen \
            ./package_templates/KivyCore/Package.swift \
            ./package_templates/KivyCore.yml \
            --output output/kivy/Package.swift
        # run: |
        #   cp -f package_templates/KivyCore/Package.swift output/kivy/
        #   ./PSProject kivy package read \
        #     output/kivy/Package.swift PythonSwiftLink KivyCore ${{ github.event.inputs.tag }} \
        #     libfreetype ${{ steps.xcframeworks.outputs.libfreetype }} \
        #     libios ${{ steps.xcframeworks.outputs.libios }} \
        #     libjpeg ${{ steps.xcframeworks.outputs.libjpeg }} \
        #     libkivy ${{ steps.xcframeworks.outputs.libkivy }} \
        #     libpillow ${{ steps.xcframeworks.outputs.libpillow }} \
        #     libpng16 ${{ steps.xcframeworks.outputs.libpng16 }} \
        #     libpyobjus ${{ steps.xcframeworks.outputs.libpyobjus }} \
        #     libSDL2_image ${{ steps.xcframeworks.outputs.libSDL2_image }} \
        #     libSDL2_mixer ${{ steps.xcframeworks.outputs.libSDL2_mixer }} \
        #     libSDL2_ttf ${{ steps.xcframeworks.outputs.libSDL2_ttf }} \
        #     libSDL2 ${{ steps.xcframeworks.outputs.libSDL2 }}
      
      - name: pack numpy xcframeworks
        run: |
          cd output
          mkdir numpy/xcframework

          mv -f xcframework/libnumpy.zip numpy/xcframework/
          mv -f xcframework/libnpyrandom.zip numpy/xcframework/
          mv -f xcframework/libnpymath.zip numpy/xcframework/
          echo "ls output:"
          ls
          echo "ls output/numpy:"
          ls numpy

      - name: pack kivy xcframeworks
        run: |
          cd output
          mv -f xcframework kivy/
          echo "ls output:"
          ls
          echo "ls output/kivy:"
          ls kivy

      - name: update python package.swift
        run: |
           tools/SwiftPackageGen \
            ./package_templates/KivyPythonCore/Package.swift \
            ./package_templates/KivyPythonCore.yml \
            --output output/python/Package.swift
        # run: |
        #   cp -f package_templates/KivyPythonCore/Package.swift output/python/
        #   ./PSProject kivy package read \
        #     output/python/Package.swift PythonSwiftLink KivyPythonCore ${{ github.event.inputs.tag }} \
        #     libcrypto ${{ steps.xcframeworks.outputs.libcrypto }} \
        #     libffi ${{ steps.xcframeworks.outputs.libffi }} \
        #     libssl ${{ steps.xcframeworks.outputs.libssl }} \
        #     libpython310 ${{ steps.xcframeworks.outputs.libpython310 }}
      
          
      # uploading "output" folder for the next task to use. (ubuntu machine)
      - uses: actions/upload-artifact@v3
        with:
          name: kivy-output
          path: ./output
  
  #moving next part to an ubuntu machine
  create_package:
    name: Release Packages
    runs-on: ubuntu-latest
    needs: [toolchainBuild]


    steps:
      - uses: actions/checkout@v4
  #       # with:
  #       #   repository: pythonswiftlink/KivySwiftLink
      - uses: actions/download-artifact@v3
        with:
          name: kivy-output

      - name: create KivyPythonCore
        run: |
          cp -rf package_templates/KivyPythonCore KivyPythonCore
          cp -f python/Package.swift KivyPythonCore/
          mv -f python/python_lib.zip KivyPythonCore/Sources/PythonLibrary/

      # commit new package to kivypythoncore/master
      - name: commit KivyPythonCore to master
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.Homebrew }}
        with:
          source-directory: 'KivyPythonCore'
          destination-github-username: 'pythonswiftlink'
          destination-repository-name: 'KivyPythonCore'
          user-email: pythonswiftlink@gmail.com
          target-branch: master
      
      # create a new release from master
      - name: release KivyPythonCore
        uses: ncipollo/release-action@v1
        with:
          artifacts: "python/python_dist.zip, python/xcframework/*.zip"
          tag: ${{ github.event.inputs.tag }}
          repo: KivyPythonCore
          token: ${{ secrets.Homebrew }}
          allowUpdates: true
      
      - name: create KivyCore
        run: |
          cp -rf package_templates/KivyCore KivyCore
          #mv -f kivy/xcframework KivyCore/Resources/
          cp -f kivy/Package.swift KivyCore/

      # commit new package to kivyswiftlink/master
      - name: commit KivyCore to master
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.Homebrew }}
        with:
          source-directory: 'KivyCore'
          destination-github-username: 'pythonswiftlink'
          destination-repository-name: 'KivyCore'
          user-email: pythonswiftlink@gmail.com
          target-branch: master
      
      # create a new release from master and python_lib.zip / dist_lib.zip to the release
      - name: release KivyCore
        uses: ncipollo/release-action@v1
        with:
          artifacts: "kivy/kivy_dist.zip, kivy/site-packages.zip, kivy/xcframework/*.zip"
          tag: ${{ github.event.inputs.tag }}
          repo: KivyCore
          token: ${{ secrets.Homebrew }}
          allowUpdates: true
      
      # - name: create KivyNumpy
      #   run: |
      #     cp -rf package_templates/KivyNumpy KivyNumpy
      #     mv -f numpy/xcframework KivyNumpy/Resources/


  #     - run: |
          
  #         git clone https://github.com/PythonSwiftLink/PythonCore
  #         mkdir KivyCore
  #         mkdir KivyCore/Sources

  #         cp -rf PythonCore/Sources/PythonCore KivyCore/Sources/
  #         cp -rf xcframework KivyCore/Sources/PythonCore/
  #         cp -f Package.swift KivyCore/
      
  #     # commit new package to kivyswiftlink/master
  #     - name: Push to master
  #       uses: cpina/github-action-push-to-another-repository@main
  #       env:
  #         API_TOKEN_GITHUB: ${{ secrets.Homebrew }}
  #       with:
  #         source-directory: 'KivyCore'
  #         destination-github-username: 'pythonswiftlink'
  #         destination-repository-name: 'KivyCore'
  #         user-email: pythonswiftlink@gmail.com
  #         target-branch: master
      
  #     # create a new release from master and python_lib.zip / dist_lib.zip to the release
  #     - uses: ncipollo/release-action@v1
  #       with:
  #         artifacts: "python_lib.zip, dist_lib.zip"
  #         tag: ${{ github.event.inputs.tag }}
  #         repo: KivyCore
  #         token: ${{ secrets.Homebrew }}
  #         allowUpdates: true
