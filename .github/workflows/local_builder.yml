# This workflow will build a KivySwiftLink release

name: release builder v3


on:

  workflow_dispatch:
    inputs:
      tag:
        description: 'input new release tag'
        required: true
        type: string
      lastest:
        description: 'lastest release?'
        required: false
        type: boolean
        default: false

jobs:
  toolchainBuild:
    #runs-on: macOS-13
    runs-on: self-hosted
    permissions:
        contents: write
  
    steps:
    #   - uses: maxim-lobanov/setup-xcode@v1
    #     with:
    #       xcode-version: '15.0'
        
    #   - uses: actions/checkout@v4
      
    #   - name: setup python
    #     uses: actions/setup-python@v4
    #     with:
    #       python-version: '3.11' # install the python version needed
      
      # - name: brew installs
      #   run: |
      #     brew tap PythonSwiftLink/tools
      #     brew install swiftpackagegen
      
      # - name: chmod tools
      #   run: |
      #     chmod 755 tools/SwiftPackageGen
      #     chmod 755 tools/PSProject
      
      - name: install kivy-ios
        run: |
          python3 -m pip install --upgrade pip
          
          #pip3 install https://github.com/kivy/kivy-ios/archive/master.zip
          git clone https://github.com/kivy/kivy-ios
          
          # new kivy recipe patches before building it.
          
          # curl -O https://github.com/kivy/kivy/archive/2.2.1.zip
          # or
          git clone --depth 1 -b 2.2.1 https://github.com/kivy/kivy
          
          ##### open cv fix #####
          
          cp package_templates/camera_avfoundation_implem.m kivy/kivy/core/camera/camera_avfoundation_implem.m
          ls kivy-ios/kivy_ios/recipes
          ##### apply modified kivy to recipe as "src" #####
          mv kivy kivy-ios/kivy_ios/recipes/kivy/src

      - name: modify kivy recipe
        shell: python
        run: |
          init_path = "kivy-ios/kivy_ios/recipes/kivy/__init__.py"
          with open(init_path, "r") as input_file:
            init = input_file.read()
            init = init.replace("url = \"https://github.com/kivy/kivy/archive/{version}.zip\"", "url = \"src\"")
            print(init)
            with open(init_path, "w") as output_file:
              output_file.write(init)
      
      - name: install modified kivy-ios
        run: |
          pip3 install -e kivy-ios

      #### build phase ####
      
      - name: build hostpython3
        run: toolchain build hostpython3
      - name: build python3
        run: |
          toolchain build python3
          swift run --package-path KivyBuilder KivyBuilder toolchain python3

      - name: build numpy
        run: |
          toolchain build numpy
          swift run --package-path KivyBuilder KivyBuilder toolchain numpy

      - name: build kivy
        run: |
            toolchain build kivy
            swift run --package-path KivyBuilder KivyBuilder toolchain kivy

      - name: build pillow
        run: |
            toolchain build kivy
            swift run --package-path KivyBuilder KivyBuilder toolchain pillow

      - name: python_dist.zip
        working-directory: output/python
        run: |
          zip -r python_dist.zip dist
          rm -rf dist

      - name: kivy_dist.zip
        working-directory: output/kivy
        run: |
          zip -r kivy_dist.zip dist
          rm -rf dist
      
      - name: numpy_dist.zip
        working-directory: ./output/numpy
        run: |
          zip -r numpy_dist.zip dist
          rm -rf dist
          

      - name: python zip xcframeworks
        working-directory: ./output/python3/xcframework
        run: |
          mv -f libpython3.11.xcframework libpython311.xcframework
          for FILE in *; 
              do 
                  #filename="$FILE"
                  #echo $filename
                  zip -r "${FILE%.*}".zip $FILE
                  rm -rf $FILE
              done

      - name: kivy zip xcframeworks
        working-directory: ./output/kivy/xcframework
        run: |
          for FILE in *; 
              do 
                  #filename="$FILE"
                  #echo $filename
                  zip -r "${FILE%.*}".zip $FILE
                  rm -rf $FILE
              done

      - name: numpy zip xcframeworks
        working-directory: ./output/numpy/xcframework
        run: |
          for FILE in *; 
              do 
                  #filename="$FILE"
                  #echo $filename
                  zip -r "${FILE%.*}".zip $FILE
                  rm -rf $FILE
              done
